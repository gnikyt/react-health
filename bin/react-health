#!/usr/bin/env php
<?php

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Formatter\OutputFormatterStyle;
use React\EventLoop\Factory as EventLoopFactory;
use React\Dns\Resolver\Factory as DnsFactory;
use React\HttpClient\Factory as HttpClientFactory;

if ((! @include __DIR__.'/../../../autoload.php') && (! @include __DIR__.'/../vendor/autoload.php')) {
    die('You must set up the project dependencies, run the following commands:' . PHP_EOL .
         'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
         'php composer.phar install' . PHP_EOL
    );
}

$console = new Application;
$console
    ->register('run')
    ->setDescription('Checks the health of websites.')
    ->addOption(
        'src',
        null,
        InputOption::VALUE_NONE,
        'Location of website source file (json)'
    )
    ->addOption(
        'websites',
        null,
        InputOption::VALUE_NONE,
        'Check a single or multiple websites (comma seperated).'
    )
    ->setCode(function(InputInterface $input, OutputInterface $output) use($console) {
        $loop               = EventLoopFactory::create();
        $dnsResolverFactory = new DnsFactory;
        $dnsResolver        = $dnsResolverFactory->createCached('8.8.8.8', $loop);

        $factory = new HttpClientFactory;
        $client  = $factory->create($loop, $dnsResolver);

        $src_option      = $input->getOption('src') ?: __DIR__.'/../websites.json';
        $websites_option = $input->getOption('websites');

        if (! file_exists($src_option) && $websites_option == false) {
            $output->writeln("<error>Website source file \"{$src_option}\" does not exist.</error>");
            exit;
        }

        $websites = $websites_option ? explode(',', $websites_option) : json_decode(file_get_contents($src_option))->websites;
        $websites = array_map(function($value) {
            return strstr($value, '://') ? $value : 'http://'.$value;
        }, $websites);

        $rows  = [];
        $up    = 0;
        $down  = 0;
        $count = sizeof($websites);
        $start = (float) array_sum(explode(' ', microtime()));

        foreach ($websites as $website) {
            $request = $client->request('GET', $website);
            $request->on('response', function($response) use(&$rows, $website) {
                $rows[] = [$website, (int) $response->getCode(), 'UP'];
            });
            $request->on('end', function($error, $response) use(&$rows, &$up, &$down, $website) {
                if ($error) {
                    $rows[] = [$website, 404, 'DOWN'];
                    $down++;
                }

                $up++;
            });
            $request->end();
        }

        $loop->run();

        $end   = (float) array_sum(explode(' ', microtime()));
        $total = round(sprintf("%.4f", ($end - $start)), 2);

        $table = $console->getHelperSet()->get('table');
        $table
            ->setHeaders(['Website', 'Code', 'Status'])
            ->setRows($rows)
            ->render($output);

        $output->writeln("\nProcessed {$count} websites in {$total} seconds.");
        if ($down > 0) {
            $output->writeln("<error>There are {$down} websites down. {$up} websites up.</error>");
        } else {
            $output->writeln("<info>All {$up} websites are up and running.</info>");
        }
    });
$console->run();
